#!/usr/bin/env luajit
local a=require("argparse")("led","sed in lua / moonscript")a:argument("code","Code to execute")a:flag("-i")a:flag("-m --moonscript")a:flag("--clean")local b=a:parse()local loadstring=loadstring or load;local unpack=unpack or table.unpack;if not b.clean then setmetatable(_G or _ENV,{__index=require("lpeg")})do local c=coroutine;create,resume,status,wrap,yield=c.create,c.resume,c.status,c.wrap,c.yield end;do local c=table;concat,insert,remove,sort=c.concat,c.insert,c.remove,c.sort end;r=function(...)return require(...)end;MOONSCRIPT_HEADER="r = (...) -> require ...\nr'moon.all'\n"end;IN={_stdin=io.stdin:read('*a'),__index=function(self,d,e,r)if e==nil then e=tostring(self)end;if r==nil then r=e[d]end;if type(r)=='function'then return function(self,...)return r(e,...)end else return r end end,__call=coroutine.wrap(function(self)yield=yield or coroutine.yield;for f in self:gmatch("[^\n]+")do yield(f)end end),__tostring=function(self)return self._stdin end}setmetatable(IN,IN)do local g=1;for f in IN:gmatch("[^\n]+")do IN[g],g=f,g+1 end end;local h=b.code;if b.moonscript then h=assert(require("moonscript.base").to_lua(MOONSCRIPT_HEADER..h))end;local i,j=loadstring(h)if not i then io.stderr:write(j)end;i=i()if i then return io.stdout:write(tostring(i))end
